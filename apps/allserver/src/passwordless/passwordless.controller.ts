import { Body, Controller, Post } from '@nestjs/common';
import { type server } from '@passwordless-id/webauthn';

async function getRandom(): Promise<any> {
  const module = await (eval(
    `import('@passwordless-id/webauthn')`
  ) as Promise<any>);
  return module.default;
}

const registeredData: RegisterData = {
  username: 'danduh@gmail.com',
  credential: {
    id: 'i84JymRgdsm0wrLDMRYPxEZThUOyM-UZBG8qtyb_zp8',
    publicKey:
      'MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAteJHQdk_xizVPGu0B6Ovk4c5uqAIi1tsBdR-87nkBtfrOXafah1EhMC8lX0cH3csO8SErBvRvI2rvYiB7Gh1CPcGI_Pbm8wceflYVTwHoNsGnFKJLJq5wPE68EfSRBm-esP16oCal3r6DEp-U4HalC2OBMuX_Nl2Qv2EEjrpsFixfUNasgjqEl_hz6E1q6a666UBa5ZdsjQRAuE3WMACAxILxclef-31R0aWQV2jG53V86G9CisilixWeIC8yZCOInuTiSlXztq57RVY4d5vaQW4zdWv12wSW9SrkLUfRWPRWYge8laWoh1hyM52KU3xuVHs52_lP-5sT9_LlVuRgQIDAQAB',
    algorithm: 'RS256' as any,
  },
  authenticatorData:
    'SZYN5YgOjGh0NBcPZHZgW4_krrmihjLHmVzzuoMdl2NFAAAAAAiYcFjK3EuBtuEw3lDcvpYAIIvOCcpkYHbJtMKywzEWD8RGU4VDsjPlGQRvKrcm_86fpAEDAzkBACBZAQC14kdB2T_GLNU8a7QHo6-Thzm6oAiLW2wF1H7zueQG1-s5dp9qHUSEwLyVfRwfdyw7xISsG9G8jau9iIHsaHUI9wYj89ubzBx5-VhVPAeg2wacUoksmrnA8TrwR9JEGb56w_XqgJqXevoMSn5TgdqULY4Ey5f82XZC_YQSOumwWLF9Q1qyCOoSX-HPoTWrprrrpQFrll2yNBEC4TdYwAIDEgvFyV5_7fVHRpZBXaMbndXzob0KKyKWLFZ4gLzJkI4ie5OJKVfO2rntFVjh3m9pBbjN1a_XbBJb1KuQtR9FY9FZiB7yVpaiHWHIznYpTfG5Ueznb-U_7mxP38uVW5GBIUMBAAE=',
  clientData:
    'eyJ0eXBlIjoid2ViYXV0aG4uY3JlYXRlIiwiY2hhbGxlbmdlIjoiYTdjNjFlZjktZGMyMy00ODA2LWI0ODYtMjQyODkzOGE1NDdlIiwib3JpZ2luIjoiaHR0cDovL2xvY2FsaG9zdDo0MjAwIiwiY3Jvc3NPcmlnaW4iOmZhbHNlfQ==',
};

interface RegisterData {
  username: string;
  credential: any;
  authenticatorData: string;
  clientData: string;
}
interface RegisterRequest {
  registerData: RegisterData;
}

interface AuthData {
  credentialId: string;
  authenticatorData: string;
  clientData: string;
  signature: string;
}

interface AuthRequest {
  authentication: AuthData;
}

@Controller('passwordless')
export class PasswordlessController {
  @Post('/register')
  register(@Body() registerRequest: RegisterRequest) {
    console.log(registerRequest);
    return 'register';
  }

  @Post('/login')
  async login(@Body() authenticationRequest: AuthRequest) {
    // const server = (await import('@passwordless-id/webauthn')).default;
    const expected = {
      challenge: '56535b13-5d93-4194-a282-f234c1c24500', // whatever was randomly generated by the server.
      origin: 'http://localhost:4200',
      userVerified: true, // should be set if `userVerification` was set to `required` in the authentication options (default)
      counter: 0, // for better security, you should verify the authenticator "usage" counter increased since last time
    };

    const authenticationParsed = (
      await getRandom()
    ).server.verifyAuthentication(
      authenticationRequest.authentication,
      registeredData.credential,
      expected
    );
    console.log(authenticationParsed);
    return 'register';
  }
}
